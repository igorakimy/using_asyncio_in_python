async def f():
    return 123


if __name__ == '__main__':
    coro = f()

    try:
        # Сопрограмма инициируется путем "отправки" ей значения None. Внутренне это то, что цикл
        # событий будет делать с вашими сопрограммами; вам никогда не придется делать это вручную.
        # Все созданные вами сопрограммы будут выполняться либо с помощью loop.create_task(coro),
        # либо с помощью await coro. .send(None) - это то, что цикл событий делает под капотом.
        coro.send(None)
    except StopIteration as exc:
        # Когда сопрограмма возвращается, возникает исключение особого типа, называемое
        # StopIteration. Обратите внимание, что мы можем получить доступ к возвращаемому значению
        # сопрограммы через атрибут value самого исключения. Опять же, вам не нужно знать, что
        # это работает следующим образом: с вашей точки зрения, async def функции просто вернут
        # значение с помощью оператора return, как и обычные функции.
        print('The answer was:', exc.value)
        # The answer was: 123
